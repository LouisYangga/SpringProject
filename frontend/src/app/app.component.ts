import { Component, OnInit } from '@angular/core';
import { Patient } from './patient';
import { PatientService } from './patient.service';
import { HttpErrorResponse } from '@angular/common/http';
import { CommonModule, NgFor } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { NgForm } from '@angular/forms';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
  standalone: true,
  imports:  [CommonModule,FormsModule],
  
})
export class AppComponent implements OnInit {
  public patients: Patient[] = [];
  public editPatient: Patient | null = null;
  public deletePatient: Patient | null = null;
  constructor(private patientService: PatientService) {}

  ngOnInit() {
    this.getPatients();
  }

  public getPatients(): void {
    this.patientService.getPatients().subscribe(
      (response: any) => {
        console.log('Response:', response);
        if (response && response.content && Array.isArray(response.content)) {
          this.patients = response.content;
        } else {
          console.error('Invalid response format:', response);
        }
      },
      (error: HttpErrorResponse) => {
        alert(error.message);
      }
    );
  }
  public onAddPatient(addForm: NgForm): void {
    document.getElementById('add-patient-form')?.click();
    // Create a new Patient object
    const newPatient: Patient = {
      id: 0, // Set to 0 or null since it will be generated by the server
      firstName: addForm.value.firstName,
      lastName: addForm.value.lastName,
      gender: addForm.value.gender,
      dob: addForm.value.dob,
      phoneNumber: addForm.value.phoneNumber,
      address: {
        address: addForm.value.address,
        suburb: addForm.value.suburb,
        state: addForm.value.state,
        postcode: addForm.value.postcode
      }
    };

    this.patientService.addPatient(newPatient).subscribe(
      (response: any) => {
        if (response === "Patient Saved") {
          // Handle success
          this.getPatients();
          addForm.reset();
        } else {
          alert(response); 
        }
      },
      (error: HttpErrorResponse) => {
        alert(error.message); 
      }
    );
  }
  public onEditPatient(editForm: NgForm  ): void {
    document.getElementById('add-patient-form')?.click();
    // Create a new Patient object
    const updatedPatient: Patient = {
      id: editForm.value.id, 
      firstName: editForm.value.firstName,
      lastName: editForm.value.lastName,
      gender: editForm.value.gender,
      dob: editForm.value.dob,
      phoneNumber: editForm.value.phoneNumber,
      address: {
        address: editForm.value.address,
        suburb: editForm.value.suburb,
        state: editForm.value.state,
        postcode: editForm.value.postcode
      }
    };
    this.patientService.updatePatient(updatedPatient).subscribe(
      (response: any) => {
          this.getPatients();
      },
      (error: HttpErrorResponse) => {
        alert(error.message); 
      }
    );
  }
  public onDeletePatient(patientId: number): void {
    document.getElementById('add-patient-form')?.click();
    this.patientService.deletePatient(patientId).subscribe(
      (response: void) => {
          this.getPatients();
      },
      (error: HttpErrorResponse) => {
        alert(error.message); 
      }
    );
  }
  public onOpenModal(patient: Patient | null, mode:string):void {
    if (!patient) {
      patient = {} as Patient;
    }
    const container = document.getElementById('main-container');
    const button = document.createElement('button');
    button.type = 'button';
    button.style.display = 'none';
    button.setAttribute('data-toggle','modal');
    if(mode === 'add'){
      button.setAttribute('data-target','#addPatientModal');
    }
    if(mode === 'update'){
      this.editPatient = patient;
      button.setAttribute('data-target','#editPatientModal');
    }
    if(mode === 'delete'){
      this.deletePatient = patient;
      button.setAttribute('data-target','#deletePatientModal');
    }
    container?.appendChild(button);
    button.click();
  }

  public searchPatients(key: string):void {
    const results: Patient[] = [];
    for(const patient of this.patients){
      if(patient.firstName.toLowerCase().indexOf(key.toLowerCase())!==-1 
      ||patient.lastName.toLowerCase().indexOf(key.toLowerCase())!==-1
      ||patient.gender.toLowerCase().indexOf(key.toLowerCase())!==-1){
        results.push(patient);
      }
    }
    this.patients = results;
    if(results.length ===0 || !key){
      this.getPatients();
    }
  }
}

